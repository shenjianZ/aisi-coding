import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as t,b as n,a as s,e as a}from"./app-CAOoHO5Z.js";const i={},o=n(`<h2 id="shell脚本编程" tabindex="-1"><a class="header-anchor" href="#shell脚本编程"><span>Shell脚本编程</span></a></h2><h3 id="编程语言有哪些" tabindex="-1"><a class="header-anchor" href="#编程语言有哪些"><span>编程语言有哪些？</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><p><strong>机器语言</strong>：机器语言是计算机能够直接理解和执行的语言，它由二进制代码组成，以特定的指令和数据格式表示计算机的操作。</p></li><li><p><strong>汇编语言</strong>：汇编语言是一种低级语言，使用助记符，通常用于编写与硬件直接相关的程序，如嵌入式系统、驱动程序等。</p></li><li><p><strong>高级语言</strong>：高级语言是一种人类易读和理解的编程语言，更接近自然语言，常见的高级语言包括 Python、Java、C、C++ 等。</p></li></ul></div><p><code>shell</code>是解释型的高级语言</p><p><code>shell</code>流行的版本：<code>/bin/bash</code>、<code>ash、ksh、csh、tcsh、zsh</code></p><h4 id="bash特性" tabindex="-1"><a class="header-anchor" href="#bash特性"><span>bash特性</span></a></h4><p><strong>命令补全</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> bash-completion <span class="token comment">#确保已安装 bash-completion 命令自动补全</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>历史命令</strong></p><p>最多存放1000条</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">history</span> <span class="token parameter variable">-n</span> <span class="token comment">#显示最近的n条命令</span>
<span class="token function">history</span> <span class="token parameter variable">-d</span> n <span class="token comment">#删除最近的n条命令</span>
<span class="token operator">!</span>n    <span class="token comment">#执行编号的为 n 的命令</span>
<span class="token operator">!</span>-n    <span class="token comment">#执行倒数编号的为 n 的命令</span>
<span class="token operator">!</span><span class="token operator">!</span>    <span class="token comment">#执行最后一条命令</span>
<span class="token operator">!</span>$    <span class="token comment">#上一条命令的参数 </span>
<span class="token function">cat</span> ~/.bash_history <span class="token comment">#查看历史命令</span>
<span class="token function">history</span> <span class="token parameter variable">-c</span> <span class="token comment">#清空历史命令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>别名</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">alias</span> <span class="token comment">#查看系统别名</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">h5</span><span class="token operator">=</span><span class="token string">&#39;head -5&#39;</span> <span class="token comment">#添加别名（临时有效）</span>
<span class="token builtin class-name">unalias</span> h5 <span class="token comment">#取消别名</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;alias h5=&#39;head -5&#39;&quot;</span> <span class="token operator">&gt;&gt;</span>  ~/.bashrc  <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">source</span>  ~/.bashrc <span class="token comment">#添加永久别名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bash<strong>初始化</strong></p><p>环境变量：<code>/etc/profile</code>、<code>/etc/bashrc</code>、<code>~/.profile</code>、<code>~/.bash_login</code>、<code>~/.bash_profile</code>、<code>~/.bash_logout</code></p><p><code>~/.bash_login</code>和 <code>~/.bash_logout</code></p><p><strong>快捷键</strong></p><ul><li><code>CTRL+V :</code>光标移动到行首</li><li><code>CTRL+E :</code>光标移动到行首</li><li><code>CTRL+C :</code>强制终止命令</li><li><code>CTRL+L :</code>清屏</li><li><code>CTRL+U :</code>删除、剪切光标前的字符</li><li><code>CTRL+K :</code>删除、剪切光标后的字符</li><li><code>CTRL+Y :</code>粘贴之前删除、剪切的字符</li><li><code>CTRL+R :</code>在历史命令中搜索</li><li><code>CTRL+D :</code>退出当前终端</li><li><code>CTRL+Z :</code>暂停，并放入后台</li><li><code>CTRL+S :</code>暂停屏幕输出</li><li><code>CTRL+Z :</code>恢复屏幕输出</li></ul><p><strong>前后台作业控制</strong></p><p>前后台作业的定义</p><ol><li><strong>前台作业</strong>： <ul><li>前台作业是指用户启动的任务或程序，在用户交互界面下执行，并且用户可以直接看到任务的执行过程和结果。</li><li>前台作业通常需要用户输入，用户交互，或者在图形用户界面（GUI）下进行操作。</li><li>在操作系统中，前台作业往往占据了用户的输入设备（如终端或窗口），用户需要等待任务执行完成后才能继续进行其他操作。</li></ul></li><li><strong>后台作业</strong>： <ul><li>后台作业是指用户启动的任务或程序，在后台（即非交互式环境）执行，并且用户不需要直接参与或观察任务的执行过程。</li><li>后台作业通常在计算机系统的背景下运行，用户可以继续进行其他操作而不必等待后台任务完成。</li><li>在操作系统中，后台作业不会占据用户的输入设备，允许用户同时执行其他任务或操作。</li></ul></li></ol><p>总的来说，前台作业和后台作业描述了用户任务或程序在计算机系统中的不同运行方式和交互方式。前台作业需要用户直接参与和观察，而后台作业则在背景下运行，用户不需要直接干预。</p><ul><li><p><code>commond &amp;</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> sl
sl   <span class="token comment">#前台运行</span>
sl <span class="token operator">&amp;</span> <span class="token comment">#后台运行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>CTRL+Z ：</code>暂停前台运行的作业，挂起到后台</p></li><li><p><code>jobs ：</code>列出运行、停止的作业，显示作业的编号、作业状态（running 或 stopped）、作业所在的进程组 ID、作业的命令</p></li><li><p><code>jobs -l ：</code>用于列出当前 shell 中所有作业的详细信息，包括作业编号、进程 ID（PID）、作业状态</p></li><li><p><code>fg %n :</code>后台作业切换到前台运行。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">fg</span> %1 <span class="token comment">#将作业编号为 1 的后台作业切换到前台运行。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>bg %n :</code>一个停止的作业放到后台继续运行。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">bg</span> %2 <span class="token comment">#将作业编号为 2 的停止作业放到后台继续运行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>kill %n ：</code>向一个正在运行的作业发送信号，以结束或者改变它的状态 <code>kill</code> 命令默认发送的是终止信号（<code>SIGTERM</code>，信号编号为15） <code>kill -9 %n</code> 可以发送强制终止信号（<code>SIGKILL</code>，信号编号为9），用于强制结束进程。</p></li></ul><h3 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向"><span>重定向</span></a></h3><p>硬件设备和文件描述符</p><table><thead><tr><th>文件描述符</th><th>文件名</th><th>类型</th><th>硬件</th></tr></thead><tbody><tr><td>0</td><td><code>stdin</code></td><td>标准输入文件</td><td>键盘</td></tr><tr><td>1</td><td><code>stdout</code></td><td>标准输出文件</td><td>显示器</td></tr><tr><td>1</td><td><code>stderr</code></td><td>标准错误输出文件</td><td>显示器</td></tr></tbody></table><h4 id="输出重定向" tabindex="-1"><a class="header-anchor" href="#输出重定向"><span><strong>输出重定向</strong></span></a></h4><ul><li><p>标准输出重定向</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">command</span> <span class="token operator">&gt;</span> <span class="token function">file</span> 等价于   <span class="token builtin class-name">command</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token function">file</span>
<span class="token builtin class-name">command</span> <span class="token operator">&gt;&gt;</span> <span class="token function">file</span> 等价于  <span class="token builtin class-name">command</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;&gt;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>标准错误输出重定向</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">command</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token function">file</span>
<span class="token builtin class-name">command</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将标准错误重定向到标准输出</p><div class="language-bash&#39; line-numbers-mode" data-ext="bash&#39;" data-title="bash&#39;"><pre class="language-bash&#39;"><code>command &gt;file 2&gt;&amp;1
command &gt;&gt;file 2&gt;&amp;1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>标准错误和标准输出重定向</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">command</span> <span class="token operator">&amp;&gt;</span>file
<span class="token builtin class-name">command</span> <span class="token operator">&gt;</span>file <span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span>file
<span class="token builtin class-name">command</span> <span class="token operator">&gt;</span>file <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将标准错误和标准输出重定向到<code>/dev/null</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">command</span> <span class="token operator">&amp;&gt;</span>/dev/null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">command</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash&#39; line-numbers-mode" data-ext="bash&#39;" data-title="bash&#39;"><pre class="language-bash&#39;"><code>command &gt;/dev/null 2&gt;&amp;1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="输入重定向" tabindex="-1"><a class="header-anchor" href="#输入重定向"><span><strong>输入重定向</strong></span></a></h4><ul><li>输入</li><li>作为分界符</li></ul><p><strong>管道</strong></p><p>将一个命令的输出传递给另一个命令的输入</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>command1 <span class="token operator">|</span> command2 <span class="token comment">#将 command1 的输出作为 command2 的输入进行处理。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>| tee</strong></p><p>将命令的输出同时输出到屏幕上和指定的文件中</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">command</span> <span class="token operator">|</span> <span class="token function">tee</span> file.txt <span class="token comment">#将 command 的输出同时输出到屏幕上和文件 file.txt 中。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="命令排序" tabindex="-1"><a class="header-anchor" href="#命令排序"><span>命令排序</span></a></h3><p><strong><code>&amp;&amp;</code> 和 <code>||</code> 控制命令执行顺序和逻辑执行</strong></p><p><code>&amp;&amp;</code>：表示逻辑与（AND）。当使用 <code>&amp;&amp;</code> 连接两个命令时，只有前一个命令成功执行（返回退出码为0）时，才会执行后一个命令</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>command1 &amp;&amp; command2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令表示当 <code>command1</code> 成功执行后（返回退出码为0），才会执行 <code>command2</code>。</p><p><code>||</code>：表示逻辑或（OR）。当使用 <code>||</code> 连接两个命令时，只要前一个命令执行失败（返回退出码非0），就会执行后一个命令</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>command1 || command2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令表示当 <code>command1</code> 执行失败后（返回退出码非0），才会执行 <code>command2</code>。</p><p><strong><code>;</code>用于分隔</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>command1 ; command2 ; command3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令表示先执行 <code>command1</code>，然后执行 <code>command2</code>，最后执行 <code>command3</code>，无论前面的命令是否成功执行。</p><h3 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符"><span>通配符</span></a></h3><ul><li><code>* :</code>匹配任意多个字符</li><li><code>? :</code>匹配任意单个字符</li><li><code>[abc] :</code>匹配a，b，c中任意单个字符</li><li><code>[!abc] :</code>匹配排除a，b，c中任意单个字符</li><li><code>[a-e] :</code>匹配a-e的单个字符</li><li><code>{s1,s2} :</code>匹配s1，s2中的任意一个字符串</li></ul><h3 id="shell脚本调试" tabindex="-1"><a class="header-anchor" href="#shell脚本调试"><span>shell脚本调试</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意脚本执行调试时，<code>bash 脚本名称</code>无需执行权限，但<code>./脚本名称</code>、<code>脚本全路径</code>执行需要<code>chmod</code>赋予执行权限</p></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 定义一个函数</span>
<span class="token keyword">function</span> <span class="token function-name function">print_message</span> <span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Printing message...&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment"># 主程序</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Starting script...&quot;</span>
print_message
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Script finished.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>-v</code>显示脚本执行过程中的每一行命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">bash</span> <span class="token parameter variable">-v</span> t.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>启用调试模式，显示脚本执行过程中的每一行命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">bash</span> <span class="token parameter variable">-x</span> t.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>检查脚本语法是否正确，但不执行脚本</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">bash</span> <span class="token parameter variable">-n</span> t.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="作业命令" tabindex="-1"><a class="header-anchor" href="#作业命令"><span>作业命令</span></a></h3><p><strong><code>nohup</code></strong></p><p><code>nohup</code> 命令用于在后台运行命令，并且可以忽略挂断信号，即使用户退出登录或者关闭终端，被启动的进程也会继续执行。</p><ul><li><code>command</code> 是要执行的命令。</li><li><code>[args]</code> 是命令的参数。</li><li><code>&amp;</code> 用于将命令放入后台执行</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">nohup</span> <span class="token builtin class-name">command</span> <span class="token punctuation">[</span>args<span class="token punctuation">]</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>nohup</code> 命令会将命令的输出默认重定向到一个名为 <code>nohup.out</code> 的文件中。如果想要自定义输出文件的名称和位置，可以使用重定向符号 <code>&gt;</code>，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">nohup</span> ./mytask.sh <span class="token operator">&gt;</span> custom_output.log <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不希望在当前目录生成该文件，可以将输出重定向到其他地方，或者在命令后添加 <code>&gt;/dev/null 2&gt;&amp;1</code>，将标准输出和标准错误都重定向到 <code>/dev/null</code>，即丢弃输出。</p><p><strong><code>screan</code></strong></p><p><code>screen</code> 是一个用于在Unix和类Unix系统上创建多个虚拟终端的命令行工具。它允许你在单个SSH会话或终端窗口中创建多个窗口，并在这些窗口之间轻松切换，同时还可以在后台运行命令</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>yum install -y screan
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>创建会话且立即连接</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">screen</span> <span class="token parameter variable">-S</span> session_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建会话且稍后连接</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">screen</span> <span class="token parameter variable">-dmS</span> session_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>连接会话</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">screen</span> <span class="token parameter variable">-r</span> session_id
<span class="token function">screen</span> <span class="token parameter variable">-r</span> session_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>关闭会话 <code>CTRL+D</code> 、<code>exit</code></p></li><li><p>查看会话</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">screen</span> <span class="token parameter variable">-ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="shell变量" tabindex="-1"><a class="header-anchor" href="#shell变量"><span>shell变量</span></a></h3><h4 id="变量类型" tabindex="-1"><a class="header-anchor" href="#变量类型"><span>变量类型</span></a></h4><p><strong>自定义变量</strong></p><p>自定义变量仅在当前<code>shell</code>有效，<code>unset</code>可取消变量</p><p><strong>环境变量</strong></p><p><code>eport</code></p><p><strong>位置变量</strong></p><p>位置变量（Positional Parameters）在Shell脚本中是非常重要的概念，它们用于传递参数给脚本。</p><p>在Bash脚本中，位置变量由 <code>$1</code>、<code>$2</code>、<code>$3</code> 等表示，依次代表传递给脚本的第一个、第二个、第三个参数，以此类推。<code>$0</code> 代表脚本本身的名称。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;第一个参数是：<span class="token variable">$1</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;第二个参数是：<span class="token variable">$2</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;脚本本身的名称是：<span class="token variable">$0</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将这个脚本保存为 <code>example.sh</code>，并在命令行中执行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">bash</span> example.sh shenjianZ <span class="token number">11</span> pp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>预定义变量</strong></p><p>预定义变量是指在Shell脚本中预先定义好的一些特殊变量，它们具有特定的含义和用途，可以在脚本中直接使用。</p><p>在Bash脚本中，一些常见的预定义变量包括：</p>`,80),c=s("ol",null,[s("li",null,[s("strong",null,"$0"),a("：代表脚本本身的名称。")]),s("li",null,[s("strong",null,"$1, $2, $3, ..."),a("：代表传递给脚本的位置参数，分别表示第一个、第二个、第三个参数，以此类推。")]),s("li",null,[s("strong",null,"$#"),a("：代表传递给脚本的参数个数。")]),s("li",null,[s("strong",null,"$@"),a("：代表传递给脚本的所有参数，每个参数视为单独的引号分隔的字符串。")]),s("li",null,[s("strong",null,"$?"),a("：代表上一个命令的退出状态码（返回值）。")]),s("li",null,[s("strong",null,"$$"),a("：代表当前Shell进程的PID（进程ID）。")]),s("li",null,[s("strong",null,"$!"),a("：代表上一个后台命令的PID。")]),s("li",null,[a("**"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"∗"),s("mo",null,"∗"),s("mtext",null,"：代表当前"),s("mi",null,"S"),s("mi",null,"h"),s("mi",null,"e"),s("mi",null,"l"),s("mi",null,"l"),s("mtext",null,"进程的"),s("mi",null,"P"),s("mi",null,"I"),s("mi",null,"D"),s("mtext",null,"（与")]),s("annotation",{encoding:"application/x-tex"},"**：代表当前Shell进程的PID（与")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4653em"}}),s("span",{class:"mord"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord cjk_fallback"},"：代表当前"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"ll"),s("span",{class:"mord cjk_fallback"},"进程的"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mord cjk_fallback"},"（与")])])]),a("$相同）。")])],-1),p=n(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;脚本名称：<span class="token variable">$0</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;传递给脚本的参数个数：<span class="token variable">$#</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;传递给脚本的所有参数：<span class="token variable">$@</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;传递给脚本的第一个参数：<span class="token variable">$1</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;传递给脚本的第二个参数：<span class="token variable">$2</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;上一个命令的退出状态码：<span class="token variable">$?</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;当前Shell进程的PID：<span class="token variable">$$</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>引用变量</strong></p><ul><li><code>&#39; &#39;</code>是强引用，用于保留字符串中特殊字符的含义，或者避免变量替换。</li><li><code>&quot; &quot;</code>是弱引用，用于允许变量替换和扩展。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token string">&quot;world&quot;</span>

<span class="token builtin class-name">echo</span> <span class="token string">&#39;Hello $var&#39;</span>  <span class="token comment"># 输出：Hello $var</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Hello <span class="token variable">$var</span>&quot;</span>  <span class="token comment"># 输出：Hello world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>反引号 \` \` 在Shell中用于执行命令，并将其结果赋给变量。 在现代Shell脚本中逐渐被 <code>$()</code> 替代，因为 <code>$()</code> 更加直观和易读，而且更容易进行嵌套。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">current_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;当前日期是：<span class="token variable">$current_date</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="变量运算" tabindex="-1"><a class="header-anchor" href="#变量运算"><span>变量运算</span></a></h4><ol><li><p><strong>使用 <code>expr</code> 进行运算</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> <span class="token number">10</span> + <span class="token number">5</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;10 + 5 = <span class="token variable">$result</span>&quot;</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> <span class="token number">20</span> - <span class="token number">8</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;20 - 8 = <span class="token variable">$result</span>&quot;</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> <span class="token number">6</span> <span class="token punctuation">\\</span>* <span class="token number">4</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;6 * 4 = <span class="token variable">$result</span>&quot;</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> <span class="token number">24</span> / <span class="token number">3</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;24 / 3 = <span class="token variable">$result</span>&quot;</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> <span class="token number">15</span> % <span class="token number">4</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;15 % 4 = <span class="token variable">$result</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用 <code>$((...))</code> 进行算术运算</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;10 + 5 = <span class="token variable">$result</span>&quot;</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">20</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;20 - 8 = <span class="token variable">$result</span>&quot;</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">6</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;6 * 4 = <span class="token variable">$result</span>&quot;</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">24</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;24 / 3 = <span class="token variable">$result</span>&quot;</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">15</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;15 % 4 = <span class="token variable">$result</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用<code>[ ]</code>进行运算</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$a <span class="token operator">+</span> $b<span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;10 + 20 = <span class="token variable">$result</span>&quot;</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$a <span class="token operator">-</span> $b<span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;10 - 20 = <span class="token variable">$result</span>&quot;</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$a <span class="token operator">*</span> $b<span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;10 * 20 = <span class="token variable">$result</span>&quot;</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$b <span class="token operator">/</span> $a<span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;20 / 10 = <span class="token variable">$result</span>&quot;</span>

<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$b <span class="token operator">%</span> $a<span class="token variable">))</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;20 % 10 = <span class="token variable">$result</span>&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用 <code>bc</code> 进行高精度运算</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">!</span>/bin/bash

<span class="token comment"># 使用 \`bc\` 进行高精度运算，注意小数点的处理</span>
<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;scale=2; 5 / 3&quot;</span> <span class="token operator">|</span> <span class="token function">bc</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;5 / 3 = <span class="token variable">$result</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="变量的内容删除" tabindex="-1"><a class="header-anchor" href="#变量的内容删除"><span>变量的内容删除</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#! /bin/bash</span>
<span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">&quot;www.shenjianl.cn&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>url}</span> <span class="token comment"># 输出url的长度</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>url}</span> <span class="token comment"># 输出url的值</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${url<span class="token operator">##</span>*.}</span> <span class="token comment"># 从前往后，贪婪匹配，输出 cn</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${url<span class="token operator">#</span>*.}</span> <span class="token comment"># 从前往后，最短匹配，输出 shenjianl.cn</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${url<span class="token operator">%%</span>.*}</span> <span class="token comment"># 从后往前，贪婪匹配，输出 www</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${url<span class="token operator">%</span>.*}</span> <span class="token comment"># 从后往前，最短匹配，输出 www.shenjianl</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="索引的切片" tabindex="-1"><a class="header-anchor" href="#索引的切片"><span>索引的切片</span></a></h4><p><code>\${}</code> 来进行变量的索引和切片操作</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 定义一个变量</span>
<span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">&quot;www.shenjianl.cn&quot;</span>

<span class="token comment"># 获取变量中的前五个字符</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;前五个字符：<span class="token variable">\${url<span class="token operator">:</span>0<span class="token operator">:</span>5}</span>&quot;</span>

<span class="token comment"># 获取变量中的第五个字符到最后一个字符</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;第五个字符到最后一个字符：<span class="token variable">\${url<span class="token operator">:</span>4}</span>&quot;</span>

<span class="token comment"># 获取变量中的第六个字符到倒数第二个字符</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;第六个字符到倒数第二个字符：<span class="token variable">\${url<span class="token operator">:</span>5<span class="token operator">:-</span>1}</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量内容的替换</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 定义一个变量</span>
<span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">&quot;www.shenjianl.cn&quot;</span>

<span class="token comment"># 将第一个匹配到的字符串 www 替换为 blog</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">\${url<span class="token operator">/</span>www<span class="token operator">/</span>blog}</span>&quot;</span>  <span class="token comment"># 输出 blog.shenjianl.cn</span>

<span class="token comment"># 将所有匹配到的字符串 n 替换为 X,贪婪匹配</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">\${url<span class="token operator">/</span><span class="token operator">/</span>n<span class="token operator">/</span>X}</span>&quot;</span>  <span class="token comment"># 输出 www.sheXJiaol.cX</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h4><p>定义函数</p><p>常见的方式：</p><ol><li><p>使用 <code>function</code> 关键字：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">function</span> <span class="token function-name function">function_name</span> <span class="token punctuation">{</span>
    <span class="token comment"># 函数体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>直接使用函数名：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>function_name<span class="token punctuation">{</span>
    <span class="token comment"># 函数体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><code>source</code> 命令来加载另一个脚本文件，并使其中定义的函数在当前脚本中可用。</p><p><code>return</code>返回函数结果，使用<code>$?</code>接受返回值</p><p>在Shell脚本中，全局变量和局部变量的概念与其他编程语言中的类似，但是Shell中的作用域和变量的生命周期可能略有不同。</p><ul><li><strong>全局变量</strong>：</li><li><strong>局部变量</strong>：</li></ul><h4 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h4><p><strong>for循环</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">variable</span> <span class="token keyword">in</span> list
<span class="token keyword">do</span>
    <span class="token comment"># 在这里执行循环体中的命令，可以使用 $variable 引用当前迭代的元素</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>while循环</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">while</span> <span class="token punctuation">[</span> 条件 <span class="token punctuation">]</span>
<span class="token keyword">do</span>
    <span class="token comment"># 在这里执行循环体中的命令</span>
<span class="token keyword">done</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>until语句</strong></p><p><code>until</code>循环会在条件为假时执行循环体中的命令，直到条件为真为止</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">until</span> <span class="token punctuation">[</span> 条件 <span class="token punctuation">]</span>
<span class="token keyword">do</span>
    <span class="token comment"># 在这里执行循环体中的命令</span>
<span class="token keyword">done</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>break</code>：用于终止循环并跳出循环体。</li><li><code>continue</code>：用于跳过循环体中的剩余部分，并继续下一次循环。</li><li><code>return</code>：用于从函数中返回结果。</li><li><code>exit</code>：用于终止整个Shell脚本的执行，并返回一个指定的退出码给调用者。通常，0表示成功，非0表示出错。</li><li><code>trap</code>：用于捕获信号并执行相应的命令。在循环中使用<code>trap</code>命令可以让你在接收到指定信号时执行某些操作，比如清理工作或者终止循环。</li></ol><h3 id="shell条件结构" tabindex="-1"><a class="header-anchor" href="#shell条件结构"><span>shell条件结构</span></a></h3><h4 id="符号说明" tabindex="-1"><a class="header-anchor" href="#符号说明"><span><strong>符号说明</strong></span></a></h4><ul><li><code>(())</code> 数值比较</li><li><code>[[]]</code> 条件测试，支持正则</li><li><code>$(())</code> 整数运算</li><li><code>$[]</code> 整数运算，不推荐</li><li><code>$()</code> 命令替换，先执行里面的命令，标准输出替换</li><li><code>\${}</code> shell变量的原型，限定变量的范围</li><li><code>[]</code> 条件测试，不推荐</li><li><code>()</code> 子shell执行</li><li><code>{}</code> 当前shell执行</li></ul><p><strong>测试表达式</strong></p><ul><li><code>-d</code> 文件存在且为目录为真</li><li><code>-f </code>文件存在且为普通文件为真</li><li><code>-e</code> 文件存在为真</li><li><code>-s</code> 文件存在且文件大小不为0为真</li><li><code>-r</code> 文件存在且可读为真</li><li><code>-w</code>文件存在且可写为真</li><li><code>-x</code> 文件存在且可执行为真</li><li><code>-L</code> 文件存在且为链接文件为真</li><li><code>f1 -nt f2</code> 文件f1比文件f2新为真</li><li><code>f1 -ot f2</code> 文件f1比文件f2旧为真</li></ul><p><strong>字符串测试表达式</strong></p><ul><li><code>-n str</code> 长度为0则为真</li><li><code>-n str</code> 长度不为0则为真</li><li><code>!=</code>、<code>==</code>、<code>&lt;</code>、<code>&gt;</code></li></ul><p><strong>整数操作符</strong></p><table><thead><tr><th style="text-align:center;">在[ ]和test中使用</th><th style="text-align:center;">在[[ ]]和(( ))中使用</th></tr></thead><tbody><tr><td style="text-align:center;">-eq</td><td style="text-align:center;">==、=</td></tr><tr><td style="text-align:center;">-nq</td><td style="text-align:center;">!=</td></tr><tr><td style="text-align:center;">-gt</td><td style="text-align:center;">&gt;</td></tr><tr><td style="text-align:center;">-gt</td><td style="text-align:center;">&gt;=</td></tr><tr><td style="text-align:center;">-lt</td><td style="text-align:center;">&lt;</td></tr><tr><td style="text-align:center;">-le</td><td style="text-align:center;">&lt;=</td></tr></tbody></table><h4 id="if语句" tabindex="-1"><a class="header-anchor" href="#if语句"><span>if语句</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> 条件 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token comment"># 在条件为真时执行的命令</span>
<span class="token keyword">else</span>
    <span class="token comment"># 在条件为假时执行的命令</span>
<span class="token keyword">fi</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>case语句</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">case</span> 变量 <span class="token keyword">in</span>
    模式1<span class="token punctuation">)</span>
        <span class="token comment"># 当变量匹配模式1时执行的命令</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    模式2<span class="token punctuation">)</span>
        <span class="token comment"># 当变量匹配模式2时执行的命令</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token punctuation">..</span>.
    *<span class="token punctuation">)</span>
        <span class="token comment"># 当变量匹配所有模式都不匹配时执行的命令</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>逻辑操作符</strong></p><table><thead><tr><th style="text-align:center;">在[ ]和test中使用</th><th style="text-align:center;">在[[ ]]和(( ))中使用</th></tr></thead><tbody><tr><td style="text-align:center;">-a</td><td style="text-align:center;">&amp;&amp;</td></tr><tr><td style="text-align:center;">-o</td><td style="text-align:center;">||</td></tr><tr><td style="text-align:center;">!</td><td style="text-align:center;">!</td></tr></tbody></table><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h3><h4 id="数组的定义" tabindex="-1"><a class="header-anchor" href="#数组的定义"><span><strong>数组的定义</strong></span></a></h4><p>在Shell脚本中，可以使用多种方式来定义数组。下面是几种常见的数组定义方法：</p><p><strong>使用空格分隔的值列表</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">arr</span><span class="token operator">=</span><span class="token punctuation">(</span>value1 value2 value3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>使用索引逐个赋值</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>value1
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>value2
arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>value3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用<code>declare</code>声明数组</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">declare</span> <span class="token parameter variable">-a</span> <span class="token assign-left variable">arr</span><span class="token operator">=</span><span class="token punctuation">(</span>value1 value2 value3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">declare</span> <span class="token parameter variable">-a</span> arr
<span class="token assign-left variable">arr</span><span class="token operator">=</span><span class="token punctuation">(</span>value1 value2 value3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式通过 <code>declare -a</code> 声明数组，然后用 <code>()</code> 或者逐个赋值的方式定义数组元素。</p><p><strong>使用<code>read</code>命令从标准输入读取数组</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">read</span> <span class="token parameter variable">-a</span> arr <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">&quot;value1 value2 value3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种方式使用 <code>read</code> 命令从标准输入读取一行，并将其按照空格分隔后赋值给数组。</p><p><code>\${arr[*]} </code>和<code>\${arr[@]}</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">arr</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span> <span class="token string">&quot;banana split&quot;</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">item</span> <span class="token keyword">in</span> <span class="token string">&quot;<span class="token variable">\${arr<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>&quot;</span><span class="token punctuation">;</span> <span class="token keyword">do</span>

    <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$item</span>&quot;</span>
<span class="token keyword">done</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;------&quot;</span>

<span class="token keyword">for</span> <span class="token for-or-select variable">item</span> <span class="token keyword">in</span> <span class="token string">&quot;<span class="token variable">\${arr<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>&quot;</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$item</span>&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>apple banana <span class="token function">split</span> orange
------
apple
banana <span class="token function">split</span>
orange
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，<code>\${arr[*]}</code> 将整个数组作为一个元素，因此 <code>for</code> 循环只会执行一次，而 <code>\${arr[@]}</code> 将每个数组元素作为一个独立的参数，因此 <code>for</code> 循环会遍历数组中的每个元素。</p><p>因此，尽管在大多数情况下它们的行为是相同的，但在使用循环遍历数组时，它们之间的差别可能会变得明显。</p><p>数组中的常用变量</p><ul><li><p><code>\${arr[*]} </code> 数组所有元素</p></li><li><p><code>\${arr[@]} </code> 数组所有元素</p></li><li><p><code>\${arr[INDEX]} </code> 指定索引的数组元素</p></li><li><p><code>\${#arr[*]} </code> 数组长度</p></li><li><p><code>\${#arr[@]}</code> 数组长度</p></li><li><p><code>\${#arr}</code> 下标为0 的字符个数</p></li></ul><h4 id="数组的切片" tabindex="-1"><a class="header-anchor" href="#数组的切片"><span>数组的切片</span></a></h4><p>假设我们有一个数组如下：</p><p><strong>从索引N开始截取到数组末尾</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">\${arr<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>N}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>截取从索引N开始的M个元素</strong>：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">\${arr<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>N<span class="token operator">:</span>M}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><strong>截取数组的最后M个元素</strong>：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">\${arr<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span> -M}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\${arr[@]}\` 表示展开数组的所有元素。这些数组切片操作仅适用于 Bash 版本 4 及以上。</p><h4 id="数组的替换" tabindex="-1"><a class="header-anchor" href="#数组的替换"><span>数组的替换</span></a></h4>`,79),d=[o,c,p];function r(u,v){return l(),t("div",null,d)}const h=e(i,[["render",r],["__file","shell.html.vue"]]),k=JSON.parse('{"path":"/Middleware/linux/shell.html","title":"shell学习","lang":"zh-CN","frontmatter":{"title":"shell学习","date":"2024-03-16T00:00:00.000Z","category":"Linux","tag":["shell","linux"],"timeline":true,"star":true,"description":"Shell脚本编程 编程语言有哪些？ 提示 机器语言：机器语言是计算机能够直接理解和执行的语言，它由二进制代码组成，以特定的指令和数据格式表示计算机的操作。 汇编语言：汇编语言是一种低级语言，使用助记符，通常用于编写与硬件直接相关的程序，如嵌入式系统、驱动程序等。 高级语言：高级语言是一种人类易读和理解的编程语言，更接近自然语言，常见的高级语言包括 P...","head":[["meta",{"property":"og:url","content":"https://blog.shenjianl.cn/aisi-coding/Middleware/linux/shell.html"}],["meta",{"property":"og:site_name","content":"爱思文档"}],["meta",{"property":"og:title","content":"shell学习"}],["meta",{"property":"og:description","content":"Shell脚本编程 编程语言有哪些？ 提示 机器语言：机器语言是计算机能够直接理解和执行的语言，它由二进制代码组成，以特定的指令和数据格式表示计算机的操作。 汇编语言：汇编语言是一种低级语言，使用助记符，通常用于编写与硬件直接相关的程序，如嵌入式系统、驱动程序等。 高级语言：高级语言是一种人类易读和理解的编程语言，更接近自然语言，常见的高级语言包括 P..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T13:39:25.000Z"}],["meta",{"property":"article:author","content":"shenjianZ"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2024-03-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-21T13:39:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"shell学习\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-21T13:39:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"shenjianZ\\",\\"url\\":\\"https://shenjianl.cn\\",\\"email\\":\\"15202078626@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Shell脚本编程","slug":"shell脚本编程","link":"#shell脚本编程","children":[{"level":3,"title":"编程语言有哪些？","slug":"编程语言有哪些","link":"#编程语言有哪些","children":[{"level":4,"title":"bash特性","slug":"bash特性","link":"#bash特性","children":[]}]},{"level":3,"title":"重定向","slug":"重定向","link":"#重定向","children":[{"level":4,"title":"输出重定向","slug":"输出重定向","link":"#输出重定向","children":[]},{"level":4,"title":"输入重定向","slug":"输入重定向","link":"#输入重定向","children":[]}]},{"level":3,"title":"命令排序","slug":"命令排序","link":"#命令排序","children":[]},{"level":3,"title":"通配符","slug":"通配符","link":"#通配符","children":[]},{"level":3,"title":"shell脚本调试","slug":"shell脚本调试","link":"#shell脚本调试","children":[]},{"level":3,"title":"作业命令","slug":"作业命令","link":"#作业命令","children":[]},{"level":3,"title":"shell变量","slug":"shell变量","link":"#shell变量","children":[{"level":4,"title":"变量类型","slug":"变量类型","link":"#变量类型","children":[]},{"level":4,"title":"变量运算","slug":"变量运算","link":"#变量运算","children":[]},{"level":4,"title":"变量的内容删除","slug":"变量的内容删除","link":"#变量的内容删除","children":[]},{"level":4,"title":"索引的切片","slug":"索引的切片","link":"#索引的切片","children":[]},{"level":4,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":4,"title":"循环","slug":"循环","link":"#循环","children":[]}]},{"level":3,"title":"shell条件结构","slug":"shell条件结构","link":"#shell条件结构","children":[{"level":4,"title":"符号说明","slug":"符号说明","link":"#符号说明","children":[]},{"level":4,"title":"if语句","slug":"if语句","link":"#if语句","children":[]}]},{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[{"level":4,"title":"数组的定义","slug":"数组的定义","link":"#数组的定义","children":[]},{"level":4,"title":"数组的切片","slug":"数组的切片","link":"#数组的切片","children":[]},{"level":4,"title":"数组的替换","slug":"数组的替换","link":"#数组的替换","children":[]}]}]}],"git":{"createdTime":1711028365000,"updatedTime":1711028365000,"contributors":[{"name":"shenjianZ","email":"shenjianZLT@gmail.com","commits":1}]},"readingTime":{"minutes":29.28,"words":4392},"filePathRelative":"Middleware/linux/shell.md","localizedDate":"2024年3月16日","excerpt":"<h2>Shell脚本编程</h2>\\n<h3>编程语言有哪些？</h3>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<ul>\\n<li>\\n<p><strong>机器语言</strong>：机器语言是计算机能够直接理解和执行的语言，它由二进制代码组成，以特定的指令和数据格式表示计算机的操作。</p>\\n</li>\\n<li>\\n<p><strong>汇编语言</strong>：汇编语言是一种低级语言，使用助记符，通常用于编写与硬件直接相关的程序，如嵌入式系统、驱动程序等。</p>\\n</li>\\n<li>\\n<p><strong>高级语言</strong>：高级语言是一种人类易读和理解的编程语言，更接近自然语言，常见的高级语言包括 Python、Java、C、C++ 等。</p>\\n</li>\\n</ul>\\n</div>","autoDesc":true}');export{h as comp,k as data};
