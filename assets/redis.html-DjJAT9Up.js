import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as d,o as l,c as t,a as e,e as s,d as n,b as i}from"./app-Rtel7PQS.js";const r={},c=i(`<h1 id="redis的安装与相关配置" tabindex="-1"><a class="header-anchor" href="#redis的安装与相关配置"><span>Redis的安装与相关配置</span></a></h1><h2 id="_1-1-redis的安装与测试" tabindex="-1"><a class="header-anchor" href="#_1-1-redis的安装与测试"><span>1.1 redis的安装与测试</span></a></h2><p><strong>安装前的环境配置</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc gcc-c++
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>下载redis，并上传到 /tmp 目录</strong></p>`,5),p={href:"https://download.redis.io/redis-stable.tar.gz?_gl=1*xxdgi1*_ga*MTIwNjU3ODk5LjE3MDUyMzkzNjM.*_ga_8BKGRQKRPV*MTcwNjMyMDc2MS4yLjEuMTcwNjMyMDk2Mi41MS4wLjA.*_gcl_au*MTczMTU2MzQ1My4xNzA1MjM5MzYy",target:"_blank",rel:"noopener noreferrer"},m={href:"https://pan.baidu.com/s/1ibS0y8TYKOOWDXd0Acx0kA?pwd=nski",target:"_blank",rel:"noopener noreferrer"},u=i(`<p><strong>编译安装</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/software 
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> /tmp/redis-stable.tar.gz <span class="token parameter variable">-C</span> /opt/software <span class="token comment">#解压</span>
<span class="token function">mv</span> /opt/software/redis-stable /opt/software/redis   <span class="token comment">#更名</span>
<span class="token builtin class-name">cd</span> /opt/software/redis
<span class="token function">make</span> <span class="token comment">#redis目录下有Makefile文件，进行编译</span>
<span class="token function">make</span> <span class="token function">install</span> <span class="token comment">#安装，安装了redis-server redis-benchmark redis-cli</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>前台启动</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/usr/local/bin/redis-server <span class="token comment">#启动，也可输入 redis-server 启动，/usr/local/bin/已经在$PATH中</span>
<span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> redis <span class="token comment">#查看redis进程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>命令式后台启动</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">nohup</span> redis-server <span class="token operator">&amp;</span> <span class="token comment">#本目录下生成nohup.txt的控制台日志文件</span>
<span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> redis <span class="token comment">#查看redis进程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>守护进程方式后台启动</strong></p><p><em>修改配置文件</em> <code>redis.conf</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span> /opt/software/redis/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>显示行号</em></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>:set nu 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>查找daemonize，大约在309行附近</em></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>daemonize <span class="token function">yes</span> <span class="token comment">#修改为yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redis-cli <span class="token function">shutdown</span> <span class="token comment"># 先停止 命令式后台启动 的redis的进程</span>
redis-server /opt/software/redis/redis.conf <span class="token comment">#指定配置文件，守护进程方式后台启动</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>redis停止</strong></p><p>前台启动 ctrl+c 即可</p><p>命令式后台启动、守护进程方式后台启动方式的停止</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redis-cli <span class="token function">shutdown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_1-2-redis-conf的配置" tabindex="-1"><a class="header-anchor" href="#_1-2-redis-conf的配置"><span>1.2 redis.conf的配置</span></a></h2><p><em>修改配置文件</em> <code>redis.conf</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vim</span> /opt/software/redis/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>去除绑定IP</strong> ，将 绑定客户端IP 注释掉，大约在87行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># bind 127.0.0.1 -::1 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>关闭保护模式</strong>，大约在111行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>protected-mode no <span class="token comment">#修改为no</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>设置访问密码</strong>，大约在1045行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>requirepass <span class="token number">111</span> <span class="token comment">#修改密码为111</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，此时再次启动redis时需要输入密码</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redis-cli <span class="token function">shutdown</span> <span class="token comment"># 先停止 redis 进程</span>
redis-server /opt/software/redis/redis.conf <span class="token comment">#指定配置文件，守护进程方式后台启动</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-a</span> <span class="token number">111</span> <span class="token comment">#使用 redis-cli 访问时需要密码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>redis停止,此时需要输入密码</p><p>命令式后台启动、守护进程方式后台启动方式的停止</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redis-cli  <span class="token parameter variable">-a</span> <span class="token number">111</span> <span class="token function">shutdown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 redis-cli 中关闭</p><p>使用 <code>shutdown</code></p><p><strong>重命名redis的一些命令</strong>，练习阶段不建议</p><p>添加如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>rename-commond flushall <span class="token string">&quot;flall&quot;</span>
rename-commond flushdb  <span class="token string">&quot;fldb&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-3-redis的三种客户端" tabindex="-1"><a class="header-anchor" href="#_1-3-redis的三种客户端"><span>1.3 redis的三种客户端</span></a></h2><p>1.命令行客户端</p><p>使用 redis-cli 来连接</p><p><code>redis-cli</code> 是 Redis 提供的用于与 Redis 服务器进行交互的命令行工具。以下是一些常见的 <code>redis-cli</code> 参数及其用法：</p><p><strong>连接到 Redis 服务器：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-h</span> <span class="token operator">&lt;</span>hostname<span class="token operator">&gt;</span> <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>-h</code>: 指定 Redis 服务器的主机名。</li><li><code>-p</code>: 指定 Redis 服务器的端口号。</li><li><code>-a</code>: 指定连接 Redis 服务器的密码。</li></ul><p>2.可视化客户端</p>`,46),h={href:"https://github.com/RedisInsight/RedisDesktopManager/releases/download/0.8.8/redis-desktop-manager-0.8.8.384.exe",target:"_blank",rel:"noopener noreferrer"},g={href:"https://pan.baidu.com/s/1ibS0y8TYKOOWDXd0Acx0kA?pwd=nski",target:"_blank",rel:"noopener noreferrer"},b=i(`<p>3.第三方代码客户端</p><p>Java、Python、Php等代码客户端，封装了对redis操作的API</p><h2 id="_1-4-redis-conf-部分解析" tabindex="-1"><a class="header-anchor" href="#_1-4-redis-conf-部分解析"><span>1.4 redis.conf 部分解析</span></a></h2><h3 id="includes" tabindex="-1"><a class="header-anchor" href="#includes"><span><strong>INCLUDES</strong></span></a></h3><p>这一部分通常用于包含其他配置文件。可以在 <code>redis.conf</code> 文件中使用 <code>INCLUDES</code> 指令引入其他配置文件，使配置文件更模块化和易于管理。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;port 5000&quot;</span> <span class="token operator">&gt;&gt;</span> /home/poop/redis-text.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redis-cli  <span class="token parameter variable">-a</span> <span class="token number">111</span> <span class="token function">shutdown</span>
redis-server /opt/software/redis/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，测试完成将redis.conf的最后一行进行注释</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>redis-cli  <span class="token parameter variable">-a</span> <span class="token number">111</span> <span class="token parameter variable">-p</span> <span class="token number">5000</span> <span class="token function">shutdown</span> <span class="token comment">#停止redis</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="modules" tabindex="-1"><a class="header-anchor" href="#modules"><span><strong>MODULES</strong></span></a></h3><p>Redis 模块是一种动态加载的插件机制，允许用户扩展 Redis 的功能。在 <code>MODULES</code> 部分，你可能会配置加载一些模块，这些模块可以提供额外的功能，如新的数据类型、命令等。</p><h3 id="network" tabindex="-1"><a class="header-anchor" href="#network"><span><strong>NETWORK</strong></span></a></h3><blockquote><p>#bind 127.0.0.1 -::1</p></blockquote><p><em><strong>配置 Redis 服务器绑定的网络地址</strong></em>。具体来说：</p><ul><li><code>#</code> 表示这是一行注释，配置文件中的注释行会被忽略。</li><li><code>bind</code>: 用于指定 Redis 服务器监听的网络地址。</li><li><code>127.0.0.1</code>: IPv4 地址，表示只允许本地（localhost）连接。</li><li><code>-::1</code>: IPv6 地址，同样表示只允许本地（localhost）连接。</li></ul><p>由于这一行被注释掉（以 <code>#</code> 开头），这意味着这个配置项当前被禁用，Redis 将接受来自任何网络地址的连接，而不仅限于本地。</p><blockquote><p><code>protected-mode</code></p></blockquote><p><em><strong>用于启用或禁用 Redis 的保护模式。</strong></em></p><ul><li>默认值为 <code>yes</code>，表示保护模式被启用。</li><li>如果设置为 <code>no</code>，则表示禁用保护模式。</li></ul><p>默认情况下，保护模式是启用的， Redis 将只接受来自本地的连接。</p><blockquote><p>port 6379</p></blockquote><p><em><strong>配置Redis 服务器监听的端口号</strong></em>，指定了 Redis 服务器对外提供服务的端口。在这里，端口号被设置为 <code>6379</code>。这是 Redis 默认的端口号。</p><blockquote><p>tcp-backlog 511</p></blockquote><p><em><strong>用于指定等待连接队列的最大长度</strong></em></p><ul><li>在高请求速率的环境中，需要设置一个较大的 backlog，以避免慢速客户端连接问题。</li><li>注意，在 Linux 内核中，这个参数将与 /proc/sys/net/core/somaxconn 求较小值为最终值</li><li><code>为了达到期望的效果，请确保同时提高 </code>somaxconn<code>和</code>tcp_max_syn_backlog\` 的值。</li></ul><p>在高请求速率的环境中，适当提高 backlog 可以确保及时处理连接请求，避免连接积压导致的问题。</p><blockquote><p>timeout 0</p></blockquote><p>这个部分包含了 Redis 服务器的网络配置相关的设置，如绑定地址、监听端口等。你可以在这里配置 Redis 监听的网络接口、端口以及其他网络相关的设置。 <code>timeout</code> 配置项用于指定客户端连接的空闲超时时间。</p><ul><li><code>timeout</code>: 用于指定客户端连接的空闲超时时间，即客户端在多长时间没有向服务器发送任何命令就被认为是空闲的。</li><li><code>0</code>: 表示禁用空闲超时，即连接永不超时。如果将 <code>timeout</code> 设置为 <code>0</code>，则客户端连接将保持开放状态，不受空闲时间的限制。</li></ul><p>如果 <code>timeout</code> 的值是一个正整数，那么表示客户端连接在经过指定的秒数后如果没有进行任何交互就会被服务器关闭。这个功能有助于释放服务器资源，避免长时间没有活动的连接占用资源。</p><p>在你的配置中，<code>timeout</code> 被设置为 <code>0</code>，表示不启用空闲超时，即连接不会因为空闲而被自动关闭。</p><blockquote><p>tcp-keepalive 300</p></blockquote><p>***该参数用于在缺乏通信时通过使用 <code>SO_KEEPALIVE</code> 机制向客户端发送 TCP ACKs（应答），***具有以下两个主要目的：</p><ol><li><strong>检测死连接：</strong> 通过发送 TCP ACKs，可以检测到连接是否处于死亡状态。</li><li><strong>强制中间的网络设备认为连接是活跃的：</strong> 在网络中间的设备（如防火墙）可能会因为连接长时间没有通信而关闭连接，使用 TCP keepalive 可以防止这种情况发生。</li></ol><p>指定 TCP keepalive 的时间间隔，单位是秒。</p><ul><li>如果设置为非零值，Redis 将启用 TCP keepalive。</li><li>在 Linux 上，指定的值是发送 ACKs 的间隔时间。</li><li>为了关闭连接，需要双倍的时间。</li><li>在其他内核上，间隔时间取决于内核配置。</li></ul><p><code>tcp-keepalive</code> 被设置为 <code>300</code> 秒，在 Redis 3.2.1 及以后的版本，这也是 Redis 默认的值。</p><h3 id="general" tabindex="-1"><a class="header-anchor" href="#general"><span><strong>GENERAL</strong></span></a></h3><p>这可能是一个泛指的部分，可能包含一般性的设置，但你的提问中没有提供具体的详细信息。这部分可能包括一些全局的配置选项，影响 Redis 的整体行为。</p><blockquote><p>daemonize yes</p></blockquote><p><em><strong>用于指定 Redis 是否作为守护进程运行</strong></em></p><ul><li>如果设置为 <code>yes</code>，Redis 将作为守护进程运行，即在后台运行，而不占用当前终端。并将进程 ID (PID) 写入 <code>/var/run/redis.pid</code> 文件</li><li>如果设置为 <code>no</code>，Redis 将在前台运行，输出信息将显示在当前终端。</li><li>在由 upstart 或 systemd 管理的环境中，即使设置为 <code>yes</code>，Redis 也会被这些系统服务管理器监控，并不会直接影响 Redis 是否作为守护进程运行。</li></ul><p>在生产环境中，通常建议将 <code>daemonize</code> 设置为 <code>yes</code>，以确保 Redis 在后台持续运行，并使用相应的系统服务管理器进行监控。</p><blockquote><p>pidfile /var/run/redis_6379.pid</p></blockquote><p><em><strong>用于指定了Redis 进程的 PID（进程 ID）文件路径</strong></em></p><ul><li><code>/var/run/redis_6379.pid</code>: 指定了 PID 文件的位置，这个文件将包含 Redis 的进程 ID。</li></ul><p>Redis 在启动时会将自身的进程 ID 写入该 PID 文件。</p><p><em>请确保 Redis 进程有权限在指定的路径创建和写入 PID 文件。如果权限不足，可能会导致 Redis 启动失败或无法正确管理 Redis 进程。</em></p><p><em><strong>可以看到 poop用户由于权限不足，无法写入进程pid到 redis_6379.pid中</strong></em></p><blockquote><p>loglevel notice</p></blockquote><p><em><strong>用于指定 Redis 服务器的日志详细程度</strong></em></p><ul><li><code>debug</code>: 输出大量信息，对于开发和测试非常有用。</li><li><code>verbose</code>: 输出许多信息，其中一些可能很少有用，但不像调试级别那样混乱。</li><li><code>notice</code>: 适度详细，通常在生产环境中使用，以便记录一些重要的信息。</li><li><code>warning</code>: 仅记录非常重要或关键的消息。</li><li><code>nothing</code>: 不记录任何信息。</li></ul><p>在生产环境中，通常建议将 <code>loglevel</code> 设置为 <code>notice</code>，以确保记录一些关键的信息，而不会生成太多的日志。这使得日志文件更易于管理，并有助于快速识别潜在问题。在开发或测试环境中，你可能会选择更详细的日志级别，如 <code>debug</code> 或 <code>verbose</code>，以便更好地理解系统行为和排除问题。</p><blockquote><p>logfile &quot;&quot;</p></blockquote><p><em><strong>用于指定 Redis 的日志文件名</strong></em></p><ul><li>如果将 <code>logfile</code> 设置为空字符串，并且 Redis 以守护进程方式运行（<code>daemonize yes</code>），那么日志将被发送到 <code>/dev/null</code>，这意味着日志将被丢弃而不会记录到文件中。</li><li>如果你希望将日志保存到文件中，需要设置一个有效的文件路径。</li></ul><p>在生产环境中，通常建议将日志保存到文件中，以便更好地管理和审查系统的运行状态。</p><blockquote><p>databases 16</p></blockquote><p><em><strong>用于设置 Redis 服务器上的数据库数量</strong></em></p><ul><li>默认情况下，Redis 服务器有 16 个数据库（从 0 到 15）。可以通过 <code>SELECT &lt;dbid&gt;</code> 命令在每个连接中选择不同的数据库，其中 <code>dbid</code> 是一个介于 0 和 <code>databases-1</code> 之间的数字。</li><li>每个数据库都是相对独立的命名空间，可以存储不同的键值对。</li></ul><h3 id="security" tabindex="-1"><a class="header-anchor" href="#security"><span><strong>SECURITY</strong></span></a></h3><p>在 <code>security</code> 部分，你可能会配置一些与安全性相关的选项，比如密码认证、访问控制列表（ACL）等。这些设置有助于确保 Redis 服务器的安全性。</p><h3 id="clients" tabindex="-1"><a class="header-anchor" href="#clients"><span><strong>CLIENTS</strong></span></a></h3><p><code>clients</code> 部分涉及到客户端连接的设置。你可以在这里配置最大连接数、客户端超时时间等参数。</p><blockquote><p>maxclients 10000</p></blockquote><p><em><strong>用于设置 Redis 服务器能够同时处理的最大客户端连接数</strong></em></p><ul><li>如果 Redis 服务器无法配置进程文件限制以允许指定的限制，那么允许的最大客户端数量将设置为当前文件限制减去 32。Redis 为内部使用保留了一些文件描述符。</li><li>一旦达到限制，Redis 将关闭所有新的连接，并发送一个错误消息 &#39;max number of clients reached&#39;。</li></ul><p>在生产环境中，根据你的实际需求和服务器资源，你可以根据应用程序的并发连接数需求适当调整 <code>maxclients</code> 的值</p><h3 id="memory-management" tabindex="-1"><a class="header-anchor" href="#memory-management"><span><strong>MEMORY MANAGEMENT</strong></span></a></h3><p>在这个部分，你可以配置 Redis 的内存管理相关的设置，比如最大使用内存、内存碎片整理等。</p><blockquote><p>maxmemory <code>&lt;bytes&gt;</code></p></blockquote><p><em><strong>用于设置 Redis 服务器的内存使用限制指定的字节数</strong></em></p><p>以字节为单位，当达到内存限制时，Redis 将尝试根据选择的驱逐策略删除键。</p><ul><li>如果 Redis 无法根据策略删除键，或者策略设置为 &#39;noeviction&#39;，Redis 将开始回复错误命令，例如 SET、LPUSH 等，这些命令会使用更多内存，并将继续回复只读命令，例如 GET。</li><li>通常在将 Redis 用作 LRU 或 LFU 缓存，或者为实例设置硬内存限制时，此选项非常有用。</li></ul><p>在生产环境中，根据服务器的可用内存和应用程序的需求，可以根据需要调整 <code>maxmemory</code> 的值。选择适当的驱逐策略（<code>maxmemory-policy</code>）也是重要的，以确保根据业务需求进行合理的内存管理。</p><blockquote><p>maxmemory-policy noeviction</p></blockquote><p><em><strong>用于设置在达到内存使用限制 (<code>maxmemory</code>) 时 Redis 将如何选择要删除的键。</strong></em></p><p>当设置 <code>maxmemory-policy</code> 时，Redis 使用不同的算法来决定在达到内存限制时哪些键应该被逐出</p><ul><li>**<code>volatile-lru</code>**使用近似 LRU 算法逐出，仅适用于设置了过期时间的键。</li><li>**<code>allkeys-lru</code>**使用近似 LRU 算法逐出任何键。</li><li>**<code>volatile-lfu</code>**使用近似 LFU 算法逐出，仅适用于设置了过期时间的键。</li><li>**<code>allkeys-lfu</code>**使用近似 LFU 算法逐出任何键。</li><li>**<code>volatile-random</code>**删除设置了过期时间的随机键。</li><li>**<code>allkeys-random</code>**删除任意随机键。</li><li>**<code>volatile-ttl</code>**删除具有最接近过期时间的键（较小的 TTL）。</li><li>**<code>noeviction</code>**不逐出任何东西，对写操作返回错误。</li></ul><p><strong>LRU 表示最近最少使用</strong></p><p><strong>LFU 表示最不经常使用</strong></p><p><strong>LRU、LFU 和 volatile-ttl 均使用近似随机化算法实现。</strong></p><p>这里的默认设置是 <code>maxmemory-policy noeviction</code>，表示当达到内存限制时，不逐出任何键，对写操作返回错误。在生产环境中，选择适当的驱逐策略非常重要，以确保系统在内存不足时能够以合理的方式处理数据。</p><blockquote><p>maxmemory-samples 5</p></blockquote><p>这部分配置用于调整在使用 LRU、LFU 和最小 TTL（Time To Live）算法时 Redis 选择键的精度。具体解释如下：</p><ul><li>默认情况下，Redis 将检查五个键并选择最近最少使用的那个。</li><li>样本大小的选择影响了算法的速度和准确性。<em>较大的样本大小可以更准确地近似 LRU，但代价是更高的 CPU 使用。较小的样本大小可能更快，但不太准确。</em></li></ul><p>在生产环境中，可以根据服务器的性能和需求来调整 <code>maxmemory-samples</code> 的值，以获得适当的速度和准确性的平衡。默认值 <code>5</code> 通常能够提供足够好的结果。</p><blockquote><p>maxmemory-eviction-tenacity 10</p></blockquote><p><em><strong>用于指定 Redis 在逐出处理中的&quot;韧性&quot;（tenacity）或容忍度</strong></em></p><p>它影响了 Redis 在处理逐出时对于延迟的关注程度。</p><ul><li>设置为 <code>0</code> 时，表示追求最小的延迟，即 Redis 将尽量减少逐出处理对延迟的影响。</li><li>默认值为 <code>10</code>，表示使用默认设置，即在考虑延迟的情况下进行逐出处理。</li><li>设置为 <code>100</code> 时，表示逐出处理将不考虑延迟，以最大限度地提高逐出的处理效率，但可能会增加延迟。</li></ul><p>在异常大量的写流量情况下，可能需要调整此值以平衡延迟和逐出处理的效率。增加此值可能会提高逐出处理的效率，但会增加延迟。减小此值可能会降低延迟，但有可能影响逐出处理的效果。在生产环境中，可以根据实际情况来调整此配置。</p><h3 id="threaded-i-o" tabindex="-1"><a class="header-anchor" href="#threaded-i-o"><span><strong>THREADED I/O</strong></span></a></h3><p>这一部分涉及到 Redis 是否启用了多线程 I/O 操作的配置。在 Redis 6.0 之后，引入了多线程 I/O 来提高性能。你可以在这里配置多线程 I/O 相关的选项。</p><blockquote><p>io-threads 4</p></blockquote><p><em><strong>用于启用 Redis 的 I/O 线程功能</strong></em></p><p>:该配置项用于指定 Redis 是否启用 I/O 线程以处理客户端套接字的读写。通过启用 I/O 线程，可以在多核系统中更有效地处理 Redis 的读写操作，从而提高性能。</p><ul><li>默认情况下，线程是禁用的。</li><li>如果你的机器有至少 4 个或更多核心，建议启用 I/O 线程，留出至少一个核心。在具有更多核心的系统上，可以尝试使用较少的线程，因为使用超过 8 个线程可能帮助有限。</li><li>建议仅在实际存在性能问题的情况下使用线程 I/O，即 Redis 实例能够使用相当大比例的 CPU 时间。</li></ul>`,98);function v(k,f){const a=d("ExternalLinkIcon");return l(),t("div",null,[c,e("p",null,[e("strong",null,[e("a",p,[s("redis下载"),n(a)])]),s(" ，"),e("a",m,[s("百度网盘下载"),n(a)])]),u,e("p",null,[e("strong",null,[e("a",h,[s("客户端下载"),n(a)])]),s(" ，"),e("a",g,[s("百度网盘下载"),n(a)])]),b])}const y=o(r,[["render",v],["__file","redis.html.vue"]]),_=JSON.parse('{"path":"/Middleware/redis/redis.html","title":"Redis安装与配置","lang":"zh-CN","frontmatter":{"title":"Redis安装与配置","date":"2024-03-16T00:00:00.000Z","category":"CacheDatabase","tag":["redis"],"timeline":true,"star":true,"description":"Redis的安装与相关配置 1.1 redis的安装与测试 安装前的环境配置 下载redis，并上传到 /tmp 目录 redis下载 ，百度网盘下载 编译安装 前台启动 命令式后台启动 守护进程方式后台启动 修改配置文件 redis.conf 显示行号 查找daemonize，大约在309行附近 redis停止 前台启动 ctrl+c 即可 命令式后...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Middleware/redis/redis.html"}],["meta",{"property":"og:site_name","content":"爱思文档"}],["meta",{"property":"og:title","content":"Redis安装与配置"}],["meta",{"property":"og:description","content":"Redis的安装与相关配置 1.1 redis的安装与测试 安装前的环境配置 下载redis，并上传到 /tmp 目录 redis下载 ，百度网盘下载 编译安装 前台启动 命令式后台启动 守护进程方式后台启动 修改配置文件 redis.conf 显示行号 查找daemonize，大约在309行附近 redis停止 前台启动 ctrl+c 即可 命令式后..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-22T23:53:01.000Z"}],["meta",{"property":"article:author","content":"shenjianZ"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:published_time","content":"2024-03-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-22T23:53:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis安装与配置\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-22T23:53:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"shenjianZ\\",\\"url\\":\\"https://shenjianl.cn\\",\\"email\\":\\"15202078626@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1.1 redis的安装与测试","slug":"_1-1-redis的安装与测试","link":"#_1-1-redis的安装与测试","children":[]},{"level":2,"title":"1.2  redis.conf的配置","slug":"_1-2-redis-conf的配置","link":"#_1-2-redis-conf的配置","children":[]},{"level":2,"title":"1.3 redis的三种客户端","slug":"_1-3-redis的三种客户端","link":"#_1-3-redis的三种客户端","children":[]},{"level":2,"title":"1.4 redis.conf 部分解析","slug":"_1-4-redis-conf-部分解析","link":"#_1-4-redis-conf-部分解析","children":[{"level":3,"title":"INCLUDES","slug":"includes","link":"#includes","children":[]},{"level":3,"title":"MODULES","slug":"modules","link":"#modules","children":[]},{"level":3,"title":"NETWORK","slug":"network","link":"#network","children":[]},{"level":3,"title":"GENERAL","slug":"general","link":"#general","children":[]},{"level":3,"title":"SECURITY","slug":"security","link":"#security","children":[]},{"level":3,"title":"CLIENTS","slug":"clients","link":"#clients","children":[]},{"level":3,"title":"MEMORY MANAGEMENT","slug":"memory-management","link":"#memory-management","children":[]},{"level":3,"title":"THREADED I/O","slug":"threaded-i-o","link":"#threaded-i-o","children":[]}]}],"git":{"createdTime":1713829981000,"updatedTime":1713829981000,"contributors":[{"name":"omop","email":"116042415+shenjianZ@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":27.95,"words":4193},"filePathRelative":"Middleware/redis/redis.md","localizedDate":"2024年3月16日","excerpt":"\\n<h2>1.1 redis的安装与测试</h2>\\n<p><strong>安装前的环境配置</strong></p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>yum <span class=\\"token parameter variable\\">-y</span> <span class=\\"token function\\">install</span> gcc gcc-c++\\n</code></pre></div><p><strong>下载redis，并上传到 /tmp 目录</strong></p>","autoDesc":true}');export{y as comp,_ as data};
